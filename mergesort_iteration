void merge(int *nums, int *tmp, int left, int mid, int right)
{
    int i=left, j=mid+1, k=left;
    while(i<=mid && j<=right)
    {
        if(nums[i] > nums[j])
        {
            tmp[k++] = nums[j++];
        }
        else
        {
            tmp[k++] = nums[i++];
        }
    }
    while(i<=mid)
    {
        tmp[k++] = nums[i++];
    }
    while(j<=right)
    {
        tmp[k++] = nums[j++];
    }
    for(int i=left; i<=right; i++)
    {
        nums[i] = tmp[i];
    }
}
void mergesort(int *nums, int *tmp, int numsSize)
{
    int span = 1; //每次归并元素个数
    while(span < numsSize)
    {
        int i=0;
        while(i < numsSize-2*span+1) //加1似乎不影响
        {
            merge(nums, tmp, i, i+span-1, i+2*span-1);
            i += 2*span;
        }
        if(i<numsSize-span)
        {
            merge(nums, tmp, i, i+span-1, numsSize-1);
        }
        span *= 2;
    }
}
int* sortArray(int* nums, int numsSize, int* returnSize){
    int *tmp = (int *)malloc(sizeof(int) * numsSize);
    mergesort(nums, tmp, numsSize);
    *returnSize = numsSize;
    free(tmp);
    return nums;
}
