void merge(int *nums, int *tmp, int left, int mid, int right)
{
    int i=left, j=mid+1, k=left;
    while(i<=mid && j<=right)
    {
        if(nums[i] > nums[j])
        {
            tmp[k++] = nums[j++];
        }
        else
        {
            tmp[k++] = nums[i++];
        }
    }
    while(i<=mid)
    {
        tmp[k++] = nums[i++];
    }
    while(j<=right)
    {
        tmp[k++] = nums[j++];
    }
    for(int i=left; i<=right; i++)
    {
        nums[i] = tmp[i];
    }
}
void mergesort(int *nums, int *tmp, int left, int right)
{
    if(left<right)
    {
        int mid = left + (right-left)/2;
        mergesort(nums, tmp, left, mid);
        mergesort(nums, tmp, mid+1, right);
        merge(nums, tmp, left, mid, right);
    }
}
int* sortArray(int* nums, int numsSize, int* returnSize){
    int *tmp = (int *)malloc(sizeof(int) * numsSize);
    mergesort(nums, tmp, 0, numsSize-1);
    *returnSize = numsSize;
    free(tmp);
    return nums;
}
